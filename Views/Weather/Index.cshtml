<!-- Views/Weather/Index.cshtml -->
@using Microsoft.AspNetCore.Mvc.TagHelpers
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather Dashboard</title>
    <link rel="stylesheet" href="~/css/styles.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <header>
        <h1>Weather Dashboard using WeatherAPI</h1>
    </header>
    <nav>
        <a href="~/index.html">Home</a> |
        <a href="~/about.html">About Us</a>
    </nav>

    <main>
        <div id="button_chart_division">
            <div>
            <input type="text" id="cityInput" placeholder="Enter city">
            <button id="weatherButton" onclick="getWeather()">Get Weather</button>
            </div>
            <div id="space">
                <canvas id="weatherChart" width="400" height="200"></canvas>
            </div>
        </div>
        
    </main>

    <footer>
        <a href="contact.html">Contact Us</a>
    </footer>

    <script>
        function getWeather() {
            const city = document.getElementById('cityInput').value;

            // Your OpenWeatherMap API key
            const apiKey = 'bd5e378503939ddaee76f12ad7a97608'; // Replace 'your_api_key_here' with your actual API key

            // Create the URL by appending the city as a query parameter
            const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${apiKey}&units=metric`;

            // Use fetch to send a GET request to the server
            fetch(apiUrl, {
                method: 'GET', // Use GET since we're sending the city as a query parameter
            })
                .then(response => response.json())
                .then(data => {
                    const temperature = data.main.temp;
                    const humidity = data.main.humidity;

                    // Update the chart with the fetched data
                    updateChart(temperature, humidity);
                })
                .catch(error => {
                    console.error('Error fetching weather data:', error);
                });
        }


       
        
        
        function updateChart(temperature, humidity) {
            const ctx = document.getElementById('weatherChart').getContext('2d');

            // Destroy existing chart instance if it exists
            if (window.myChart) {
                window.myChart.destroy();
            }

            // Create new chart instance
            window.myChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['Temperature', 'Humidity'],
                    datasets: [{
                        label: 'Weather Data',
                        data: [temperature, humidity],
                        backgroundColor: [
                            'rgba(255, 99, 132, 0.2)',
                            'rgba(54, 162, 235, 0.2)',
                        ],
                        borderColor: [
                            'rgba(255, 99, 132, 1)',
                            'rgba(54, 162, 235, 1)',
                        ],
                        borderWidth: 1
                    }]
                },
                options: {
                    indexAxis: 'y',
                    responsive: true, // Allows the chart to resize based on container size
                    maintainAspectRatio: false, // Set to false to control aspect ratio independently
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
        }
    </script>
</body>
</html>
